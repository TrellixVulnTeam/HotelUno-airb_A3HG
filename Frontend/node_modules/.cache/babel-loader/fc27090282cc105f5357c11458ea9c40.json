{"ast":null,"code":"var _jsxFileName = \"/Users/decagon/Desktop/NODE007/REACT/Hoteluno-airb/Frontend/src/store/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { withRouter, useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  email: '',\n  password: '',\n  firstName: '',\n  lastName: '',\n  phone: '',\n  type: '',\n  favorites: ['']\n};\nconst AuthContext = /*#__PURE__*/React.createContext({\n  loading: false,\n  handleEmailInputChange: _e => {},\n  handlePasswordInputChange: _e => {},\n  handlePasswordConfirmationChange: _e => {},\n  handleFirstNameInput: _e => {},\n  handleLastNameInput: _e => {},\n  handlePhoneInput: _e => {},\n  handleSelect: _e => {},\n  handleLoginSubmit: _e => {},\n  handleSignupSubmit: _e => {},\n  logout: () => {},\n  loginType: 'guest',\n  data: initialData,\n  passwordConfirmation: '',\n  isSignup: false,\n  show: false,\n  userType: 'guest',\n  toggleModal: () => {},\n  guestSignUp: () => {},\n  hostSignUp: () => {},\n  signIn: () => {},\n  fetchRoomsData: () => {},\n  userData: initialData,\n  roomsData: [{\n    hostid: '',\n    hostname: '',\n    price: '',\n    description: '',\n    location: '',\n    title: '',\n    roomId: '',\n    features: '',\n    booked: false,\n    imageUrl: ['']\n  }],\n  searchResults: [{\n    hostid: '',\n    hostname: '',\n    price: '',\n    description: '',\n    location: '',\n    title: '',\n    features: '',\n    booked: false,\n    imageUrl: ['']\n  }],\n  handleSearchResults: _e => {},\n  showResults: false,\n  route: '',\n  loggedIn: false,\n  roomShown: {\n    hostid: '',\n    hostname: '',\n    price: '',\n    description: '',\n    location: '',\n    title: '',\n    roomId: '',\n    features: '',\n    booked: false,\n    imageUrl: ['']\n  },\n  handleRoomClick: _data => {},\n  formError: '',\n  handleFavorites: _data => {},\n  favorites: [''],\n  updateUser: (_a, _b, _c) => {},\n  submitBooking: _data => '',\n  guestBecomeHost: () => ''\n});\n\nconst AuthContextComp = props => {\n  _s();\n\n  const history = useHistory();\n  const [userData, setUserData] = useState(initialData);\n  const [allUsers, setAllUsers] = useState([initialData]);\n  const [roomShown, setRoomShown] = useState({});\n  const [roomsData, setRoomsData] = useState([]);\n  const [passwordConfirmation, setPasswordConfirmation] = useState('');\n  const [loginType, setLoginType] = useState('guest');\n  const [loading, setLoading] = useState(false);\n  const [show, setShow] = useState(false);\n  const [searchResults, setSearchResults] = useState([]);\n  const [isSignup, setSignup] = useState(false);\n  const [userType, setUserType] = useState('guest');\n  const [showResults, setShowResults] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [loggedInUserData, setLoggedInUserData] = useState(initialData);\n  const [formError, setFormError] = useState('');\n  const [favorites, setFavorites] = useState([]);\n  useEffect(() => {\n    setUserData(initialData);\n    setFormError('');\n  }, [show]); // Fetch all data on page load\n\n  const fetchRoomsData = async () => {\n    setLoading(true);\n\n    try {\n      const res = await axios.get('https://fierce-plains-40745.herokuapp.com/api/rooms');\n      const {\n        data\n      } = await res;\n      setRoomsData(data);\n      console.log('roomsData', roomsData, 'data', data);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }; // Make guest user a host once he clicks on Become a Host\n\n\n  const guestBecomeHost = async () => {\n    const res = await updateUser(loggedInUserData.email, 'guest', {\n      type: 'host'\n    });\n    const updUser = { ...loggedInUserData,\n      type: 'host'\n    };\n    localStorage.setItem('user', JSON.stringify(updUser));\n    return res.status;\n  };\n\n  const fetchUsersData = async () => {\n    setLoading(true);\n\n    try {\n      const res = await axios.get('https://fierce-plains-40745.herokuapp.com/api/allGuests');\n      const {\n        data\n      } = await res;\n      setAllUsers(data);\n      return data;\n    } catch (e) {\n      console.log(e);\n    }\n\n    setLoading(false);\n  }; // Fetch rooms and users once page loads\n\n\n  useEffect(() => {\n    fetchRoomsData();\n    fetchUsersData();\n  }, []); // Check local storage for a previously logged in user\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem('user');\n\n    if (loggedInUser) {\n      const foundUser = JSON.parse(loggedInUser);\n      const updatedUser = allUsers.find(user => user.email === foundUser.email && user.type === foundUser.type);\n\n      if (updatedUser) {\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        setLoggedInUserData(updatedUser);\n        setFavorites(updatedUser.favorites);\n        setLoggedIn(true);\n      }\n    }\n  }, [allUsers, favorites]); // Search through all available rooms\n\n  const handleSearchResults = e => {\n    const {\n      value\n    } = e.target;\n    if (value === '') setShowResults(false);else {\n      setShowResults(true);\n      const results = roomsData.filter(item => item.location && item.location.toLowerCase().indexOf(value.toLowerCase()) !== -1);\n      setSearchResults(results);\n    }\n  };\n\n  const submitBooking = async data => {\n    if (!loggedIn) {\n      setShow(true);\n      return {\n        message: 'You have to be logged in'\n      };\n    }\n\n    setLoading(true);\n    const res = await axios.post('https://fierce-plains-40745.herokuapp.com/api/bookings', data);\n\n    if (res.data.status === 'Successful') {\n      await updateRoom({\n        booked: true\n      }, data.roomId);\n    }\n\n    console.log(res.data);\n    setLoading(false);\n    return res.data;\n  };\n\n  const updateRoom = async (body, id) => {\n    try {\n      const {\n        data\n      } = await axios.put(`https://fierce-plains-40745.herokuapp.com/api/updateRoom/${id}`, body);\n      return data;\n    } catch ({\n      message\n    }) {\n      return message;\n    }\n  }; // Display a clicked room\n\n\n  const handleRoomClick = title => {\n    // This should later be handled with a unique room id\n    const room = roomsData.find(room => room.title === title);\n\n    if (room) {\n      setRoomShown(room);\n      props.history.push(`/room/${room.roomId}`);\n      setShowResults(false);\n    }\n  }; // Add or remove a room from list of favorites\n\n\n  const handleFavorites = id => {\n    if (!loggedIn) {\n      return alert('You have to be logged in');\n    }\n\n    const currFavorites = favorites;\n\n    if (currFavorites.includes(id)) {\n      // Remove room from favorites if it was already there\n      currFavorites.splice(currFavorites.indexOf(id), 1);\n    } else {\n      // Otherwise add it\n      currFavorites.push(id);\n    }\n\n    setFavorites(currFavorites);\n    const body = {\n      favorites: currFavorites\n    };\n    updateUser(loggedInUserData.email, 'guest', body);\n  }; // Update user info in the database\n\n\n  const updateUser = async (id, type, data) => {\n    try {\n      const res = await axios.put(`https://fierce-plains-40745.herokuapp.com/api/user/${id}?type=${type}`, data);\n      return res.data;\n    } catch ({\n      message\n    }) {\n      console.log(message);\n    }\n  }; // Validate user credentials\n\n\n  const status = validationType => {\n    switch (validationType) {\n      case 'email':\n        const testRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n\n        if (!testRegex.test(userData.email)) {\n          return 'Invalid email address';\n        }\n\n        return '';\n\n      case 'password':\n        const numReg = /[0-9]/g;\n\n        if (!(userData.password.trim().length > 7 && numReg.test(userData.password))) {\n          return 'passwords must be greater than 7 and should contain numbers and alphabets';\n        }\n\n        if (passwordConfirmation !== userData.password) {\n          return 'passwords do not match';\n        }\n\n        return '';\n\n      default:\n        return true;\n    }\n  };\n\n  const handleEmailInputChange = e => {\n    setUserData({ ...userData,\n      email: e.target.value\n    });\n  };\n\n  const handlePasswordInputChange = e => {\n    setUserData({ ...userData,\n      password: e.target.value\n    });\n  };\n\n  const handlePasswordConfirmationChange = e => {\n    setPasswordConfirmation(e.target.value);\n  };\n\n  const handleFirstNameInput = e => {\n    setUserData({ ...userData,\n      firstName: e.target.value\n    });\n  };\n\n  const handleLastNameInput = e => {\n    setUserData({ ...userData,\n      lastName: e.target.value\n    });\n  };\n\n  const handlePhoneInput = e => {\n    setUserData({ ...userData,\n      phone: e.target.value\n    });\n  };\n\n  const handleSelect = e => {\n    setLoginType(e.target.value);\n  };\n\n  const handleLoginSubmit = async e => {\n    e.preventDefault();\n    const body = {\n      email: userData.email,\n      password: userData.password,\n      type: loginType\n    };\n    const data = await validateLogin(body);\n\n    if (data && data.status === 'Successful') {\n      setLoggedIn(true);\n      setLoggedInUserData(data.data);\n      localStorage.setItem('user', JSON.stringify(data.data));\n      setShow(false);\n      history.replace('/');\n    } else {\n      data.message ? setFormError(data.message) : setFormError(data.status);\n      setTimeout(() => setFormError(''), 2000);\n    }\n  };\n\n  const handleSignupSubmit = async e => {\n    e.preventDefault();\n    const emailStatus = status('email');\n    const passwordStatus = status('password');\n\n    if (emailStatus !== '' || passwordStatus !== '') {\n      console.log(emailStatus, passwordStatus);\n    }\n\n    const body = { ...userData,\n      type: userType,\n      favorites: []\n    };\n    const data = await validateSignup(body);\n\n    if (data.status === 'Successful') {\n      setLoggedIn(true);\n      setLoggedInUserData(data.data);\n      localStorage.setItem('user', JSON.stringify(data.data));\n      setShow(false);\n      if (userType === 'host') history.replace('/host/listroom');\n    } else {\n      data.message ? setFormError(data.message) : setFormError(data.status);\n      setTimeout(() => setFormError(''), 2000);\n    }\n\n    console.log(body);\n  };\n\n  const validateLogin = async body => {\n    setLoading(true);\n\n    try {\n      const {\n        data\n      } = await axios.post('https://fierce-plains-40745.herokuapp.com/api/login', body, {\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      console.log(data);\n      return data;\n    } catch ({\n      message\n    }) {\n      console.log(message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setLoggedIn(false);\n    history.replace('/');\n  };\n\n  const validateSignup = async body => {\n    setLoading(true);\n\n    try {\n      const {\n        data\n      } = await axios.post('https://fierce-plains-40745.herokuapp.com/api/signup', body, {\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      console.log(data);\n      return data;\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleModal = () => {\n    setShow(!show);\n  };\n\n  const guestSignUp = () => {\n    setSignup(true);\n    setShow(true);\n    setUserType('guest');\n  };\n\n  const hostSignUp = () => {\n    setSignup(true);\n    setShow(true);\n    setUserType('host');\n  };\n\n  const signIn = () => {\n    setSignup(false);\n    setShow(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      loading,\n      loginType,\n      handleEmailInputChange,\n      handlePasswordInputChange,\n      handlePasswordConfirmationChange,\n      handleFirstNameInput,\n      handleLastNameInput,\n      handlePhoneInput,\n      handleSelect,\n      handleLoginSubmit,\n      handleSignupSubmit,\n      data: userData,\n      passwordConfirmation,\n      toggleModal,\n      guestSignUp,\n      hostSignUp,\n      signIn,\n      show,\n      isSignup,\n      userType,\n      fetchRoomsData,\n      roomsData,\n      searchResults,\n      handleSearchResults,\n      showResults,\n      route: props.location.pathname,\n      loggedIn,\n      userData: loggedInUserData,\n      logout,\n      roomShown,\n      handleRoomClick,\n      formError,\n      handleFavorites,\n      favorites,\n      updateUser,\n      submitBooking,\n      guestBecomeHost\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 400,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthContextComp, \"K8F13ONzyQ8SWllY+x6KfygHaq4=\", false, function () {\n  return [useHistory];\n});\n\n_c2 = AuthContextComp;\nexport const AuthContextProvider = withRouter(AuthContextComp);\n_c3 = AuthContextProvider;\nexport default AuthContext;\n\nvar _c2, _c3;\n\n$RefreshReg$(_c2, \"AuthContextComp\");\n$RefreshReg$(_c3, \"AuthContextProvider\");","map":{"version":3,"sources":["/Users/decagon/Desktop/NODE007/REACT/Hoteluno-airb/Frontend/src/store/AuthContext.tsx"],"names":["React","useState","useEffect","axios","withRouter","useHistory","initialData","email","password","firstName","lastName","phone","type","favorites","AuthContext","createContext","loading","handleEmailInputChange","_e","handlePasswordInputChange","handlePasswordConfirmationChange","handleFirstNameInput","handleLastNameInput","handlePhoneInput","handleSelect","handleLoginSubmit","handleSignupSubmit","logout","loginType","data","passwordConfirmation","isSignup","show","userType","toggleModal","guestSignUp","hostSignUp","signIn","fetchRoomsData","userData","roomsData","hostid","hostname","price","description","location","title","roomId","features","booked","imageUrl","searchResults","handleSearchResults","showResults","route","loggedIn","roomShown","handleRoomClick","_data","formError","handleFavorites","updateUser","_a","_b","_c","submitBooking","guestBecomeHost","AuthContextComp","props","history","setUserData","allUsers","setAllUsers","setRoomShown","setRoomsData","setPasswordConfirmation","setLoginType","setLoading","setShow","setSearchResults","setSignup","setUserType","setShowResults","setLoggedIn","loggedInUserData","setLoggedInUserData","setFormError","setFavorites","res","get","console","log","e","updUser","localStorage","setItem","JSON","stringify","status","fetchUsersData","loggedInUser","getItem","foundUser","parse","updatedUser","find","user","value","target","results","filter","item","toLowerCase","indexOf","message","post","updateRoom","body","id","put","room","push","alert","currFavorites","includes","splice","validationType","testRegex","test","numReg","trim","length","preventDefault","validateLogin","replace","setTimeout","emailStatus","passwordStatus","validateSignup","headers","removeItem","pathname","children","AuthContextProvider"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport React, {\n  useState, useEffect, ChangeEvent, MouseEvent,\n} from 'react';\nimport axios from 'axios';\nimport { withRouter, useHistory } from 'react-router-dom';\n\nconst initialData = {\n  email: '',\n  password: '',\n  firstName: '',\n  lastName: '',\n  phone: '',\n  type: '',\n  favorites: [''],\n};\n\nexport interface RoomData {\n    hostid: string;\n    hostname: string;\n    price: string;\n    description: string;\n    location: string;\n    title: string;\n    roomId: string;\n    features: string;\n    booked: boolean,\n    imageUrl: string[]\n}\n\nconst AuthContext = React.createContext({\n  loading: false,\n  handleEmailInputChange: (_e: ChangeEvent<HTMLInputElement>) => { },\n  handlePasswordInputChange: (_e: ChangeEvent<HTMLInputElement>) => { },\n  handlePasswordConfirmationChange: (_e: ChangeEvent<HTMLInputElement>) => { },\n  handleFirstNameInput: (_e: ChangeEvent<HTMLInputElement>) => { },\n  handleLastNameInput: (_e: ChangeEvent<HTMLInputElement>) => { },\n  handlePhoneInput: (_e: ChangeEvent<HTMLInputElement>) => { },\n  handleSelect: (_e: ChangeEvent<HTMLSelectElement>) => { },\n  handleLoginSubmit: (_e: MouseEvent<HTMLButtonElement>) => { },\n  handleSignupSubmit: (_e: MouseEvent<HTMLButtonElement>) => { },\n  logout: () => { },\n  loginType: 'guest',\n  data: initialData,\n  passwordConfirmation: '',\n  isSignup: false,\n  show: false,\n  userType: 'guest',\n  toggleModal: () => { },\n  guestSignUp: () => { },\n  hostSignUp: () => { },\n  signIn: () => { },\n  fetchRoomsData: () => { },\n  userData: initialData,\n  roomsData: [{\n    hostid: '',\n    hostname: '',\n    price: '',\n    description: '',\n    location: '',\n    title: '',\n    roomId: '',\n    features: '',\n    booked: false,\n    imageUrl: [''],\n  }],\n  searchResults: [{\n    hostid: '',\n    hostname: '',\n    price: '',\n    description: '',\n    location: '',\n    title: '',\n    features: '',\n    booked: false,\n    imageUrl: [''],\n  }],\n  handleSearchResults: (_e: ChangeEvent<HTMLInputElement>) => { },\n  showResults: false,\n  route: '',\n  loggedIn: false,\n  roomShown: {\n    hostid: '',\n    hostname: '',\n    price: '',\n    description: '',\n    location: '',\n    title: '',\n    roomId: '',\n    features: '',\n    booked: false,\n    imageUrl: [''],\n  },\n  handleRoomClick: (_data: any) => { },\n  formError: '',\n  handleFavorites: (_data: any) => { },\n  favorites: [''],\n  updateUser: (_a: any, _b: any, _c: any) => { },\n  submitBooking: (_data: any) => '' as any,\n  guestBecomeHost: () => '' as any,\n\n});\n\nconst AuthContextComp = (props: any) => {\n  const history = useHistory();\n  const [userData, setUserData] = useState(initialData);\n  const [allUsers, setAllUsers] = useState([initialData]);\n  const [roomShown, setRoomShown] = useState({} as RoomData);\n  const [roomsData, setRoomsData] = useState<RoomData[]>([]);\n  const [passwordConfirmation, setPasswordConfirmation] = useState('');\n  const [loginType, setLoginType] = useState('guest');\n  const [loading, setLoading] = useState(false);\n  const [show, setShow] = useState(false);\n  const [searchResults, setSearchResults] = useState<RoomData[]>([]);\n  const [isSignup, setSignup] = useState(false);\n  const [userType, setUserType] = useState('guest');\n  const [showResults, setShowResults] = useState(false);\n  const [loggedIn, setLoggedIn] = useState(false);\n  const [loggedInUserData, setLoggedInUserData] = useState(initialData);\n  const [formError, setFormError] = useState('');\n  const [favorites, setFavorites] = useState([] as string[]);\n\n  useEffect(() => {\n    setUserData(initialData);\n    setFormError('');\n  }, [show]);\n\n  // Fetch all data on page load\n  const fetchRoomsData = async () => {\n    setLoading(true);\n    try {\n      const res = await axios.get('https://fierce-plains-40745.herokuapp.com/api/rooms');\n      const { data } = await res;\n      setRoomsData(data);\n      console.log('roomsData', roomsData, 'data', data);\n      setLoading(false);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Make guest user a host once he clicks on Become a Host\n  const guestBecomeHost = async () => {\n    const res = await updateUser(loggedInUserData.email, 'guest', { type: 'host' });\n    const updUser = {\n      ...loggedInUserData, type: 'host',\n    };\n    localStorage.setItem('user', JSON.stringify(updUser));\n    return res.status;\n  };\n\n  const fetchUsersData = async () => {\n    setLoading(true);\n    try {\n      const res = await axios.get('https://fierce-plains-40745.herokuapp.com/api/allGuests');\n      const { data } = await res;\n      setAllUsers(data);\n      return data;\n    } catch (e) {\n      console.log(e);\n    }\n    setLoading(false);\n  };\n    // Fetch rooms and users once page loads\n  useEffect(() => {\n    fetchRoomsData();\n    fetchUsersData();\n  }, []);\n\n  // Check local storage for a previously logged in user\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem('user');\n    if (loggedInUser) {\n      const foundUser = JSON.parse(loggedInUser);\n      const updatedUser = allUsers.find((user) => user.email === foundUser.email && user.type === foundUser.type);\n      if (updatedUser) {\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n        setLoggedInUserData(updatedUser);\n        setFavorites(updatedUser.favorites);\n        setLoggedIn(true);\n      }\n    }\n  }, [allUsers, favorites]);\n\n  // Search through all available rooms\n  const handleSearchResults = (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    if (value === '') setShowResults(false);\n    else {\n      setShowResults(true);\n      const results = roomsData.filter((item) => item.location && item.location.toLowerCase().indexOf(value.toLowerCase()) !== -1);\n      setSearchResults(results);\n    }\n  };\n\n  const submitBooking = async (data: { roomId: any; }) => {\n    if (!loggedIn) {\n      setShow(true);\n      return { message: 'You have to be logged in' };\n    }\n\n    setLoading(true);\n    const res = await axios.post('https://fierce-plains-40745.herokuapp.com/api/bookings', data);\n    if (res.data.status === 'Successful') {\n      await updateRoom({ booked: true }, data.roomId);\n    }\n    console.log(res.data);\n    setLoading(false);\n    return res.data;\n  };\n\n  const updateRoom = async (body: { booked: boolean; }, id: any) => {\n    try {\n      const { data } = await axios.put(`https://fierce-plains-40745.herokuapp.com/api/updateRoom/${id}`, body);\n      return data;\n    } catch ({ message }) {\n      return message;\n    }\n  };\n\n  // Display a clicked room\n  const handleRoomClick = (title: string) => {\n    // This should later be handled with a unique room id\n    const room = roomsData.find((room) => room.title === title);\n    if (room) {\n      setRoomShown(room);\n      props.history.push(`/room/${room.roomId}`);\n      setShowResults(false);\n    }\n  };\n\n  // Add or remove a room from list of favorites\n  const handleFavorites = (id: string) => {\n    if (!loggedIn) {\n      return alert('You have to be logged in');\n    }\n    const currFavorites = favorites;\n    if (currFavorites.includes(id)) {\n      // Remove room from favorites if it was already there\n      currFavorites.splice(currFavorites.indexOf(id), 1);\n    } else {\n      // Otherwise add it\n      currFavorites.push(id);\n    }\n    setFavorites(currFavorites);\n    const body = { favorites: currFavorites };\n    updateUser(loggedInUserData.email, 'guest', body);\n  };\n\n  // Update user info in the database\n  const updateUser = async (id: string, type: string, data: { type?: string; favorites?: string[]; }) => {\n    try {\n      const res = await axios.put(`https://fierce-plains-40745.herokuapp.com/api/user/${id}?type=${type}`, data);\n      return res.data;\n    } catch ({ message }) {\n      console.log(message);\n    }\n  };\n\n  // Validate user credentials\n  const status = (validationType: string) => {\n    switch (validationType) {\n      case 'email':\n        const testRegex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\n        if (!testRegex.test(userData.email)) {\n          return 'Invalid email address';\n        }\n\n        return '';\n\n      case 'password':\n        const numReg = /[0-9]/g;\n        if (!(userData.password.trim().length > 7 && numReg.test(userData.password))) {\n          return 'passwords must be greater than 7 and should contain numbers and alphabets';\n        }\n        if (passwordConfirmation !== userData.password) {\n          return 'passwords do not match';\n        }\n        return '';\n      default:\n        return true;\n    }\n  };\n\n  const handleEmailInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserData({ ...userData, email: e.target.value });\n  };\n  const handlePasswordInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserData({ ...userData, password: e.target.value });\n  };\n\n  const handlePasswordConfirmationChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setPasswordConfirmation(e.target.value);\n  };\n\n  const handleFirstNameInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserData({ ...userData, firstName: e.target.value });\n  };\n  const handleLastNameInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserData({ ...userData, lastName: e.target.value });\n  };\n  const handlePhoneInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setUserData({ ...userData, phone: e.target.value });\n  };\n\n  const handleSelect = (e: ChangeEvent<HTMLSelectElement>) => {\n    setLoginType(e.target.value);\n  };\n\n  const handleLoginSubmit = async (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    const body = { email: userData.email, password: userData.password, type: loginType };\n    const data = await validateLogin(body);\n    if (data && data.status === 'Successful') {\n      setLoggedIn(true);\n      setLoggedInUserData(data.data);\n      localStorage.setItem('user', JSON.stringify(data.data));\n      setShow(false);\n      history.replace('/');\n    } else {\n      data.message ? setFormError(data.message) : setFormError(data.status);\n      setTimeout(() => setFormError(''), 2000);\n    }\n  };\n\n  const handleSignupSubmit = async (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    const emailStatus = status('email');\n    const passwordStatus = status('password');\n    if (emailStatus !== '' || passwordStatus !== '') {\n      console.log(emailStatus, passwordStatus);\n    }\n    const body = { ...userData, type: userType, favorites: [] };\n    const data = await validateSignup(body);\n    if (data.status === 'Successful') {\n      setLoggedIn(true);\n      setLoggedInUserData(data.data);\n      localStorage.setItem('user', JSON.stringify(data.data));\n      setShow(false);\n      if (userType === 'host') history.replace('/host/listroom');\n    } else {\n      data.message ? setFormError(data.message) : setFormError(data.status);\n      setTimeout(() => setFormError(''), 2000);\n    }\n\n    console.log(body);\n  };\n\n  const validateLogin = async (body: { email: string; password: string; type: string; }) => {\n    setLoading(true);\n    try {\n      const { data } = await axios.post('https://fierce-plains-40745.herokuapp.com/api/login', body, { headers: { 'content-type': 'application/json' } });\n      console.log(data);\n      return data;\n    } catch ({ message }) {\n      console.log(message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('user');\n    setLoggedIn(false);\n    history.replace('/');\n  };\n\n  const validateSignup = async (body: { favorites: string[]; type: any; email: string; password: string; firstName: string; lastName: string; phone: string; }) => {\n    setLoading(true);\n    try {\n      const { data } = await axios.post('https://fierce-plains-40745.herokuapp.com/api/signup', body, { headers: { 'content-type': 'application/json' } });\n      console.log(data);\n      return data;\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleModal = () => {\n    setShow(!show);\n  };\n  const guestSignUp = () => {\n    setSignup(true);\n    setShow(true);\n    setUserType('guest');\n  };\n  const hostSignUp = () => {\n    setSignup(true);\n    setShow(true);\n    setUserType('host');\n  };\n  const signIn = () => {\n    setSignup(false);\n    setShow(true);\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      loading,\n      loginType,\n      handleEmailInputChange,\n      handlePasswordInputChange,\n      handlePasswordConfirmationChange,\n      handleFirstNameInput,\n      handleLastNameInput,\n      handlePhoneInput,\n      handleSelect,\n      handleLoginSubmit,\n      handleSignupSubmit,\n      data: userData,\n      passwordConfirmation,\n      toggleModal,\n      guestSignUp,\n      hostSignUp,\n      signIn,\n      show,\n      isSignup,\n      userType,\n      fetchRoomsData,\n      roomsData,\n      searchResults,\n      handleSearchResults,\n      showResults,\n      route: props.location.pathname,\n      loggedIn,\n      userData: loggedInUserData,\n      logout,\n      roomShown,\n      handleRoomClick,\n      formError,\n      handleFavorites,\n      favorites,\n      updateUser,\n      submitBooking,\n      guestBecomeHost,\n    }}\n    >\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const AuthContextProvider = withRouter(AuthContextComp);\nexport default AuthContext;\n"]},"metadata":{},"sourceType":"module"}